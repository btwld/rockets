{
  "openapi": "3.0.0",
  "paths": {
    "/token/password": {
      "post": {
        "operationId": "AuthPasswordController_login",
        "summary": "Authenticate with username/email and password",
        "description": "Validates credentials and returns authentication tokens on success",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "User credentials",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RocketsServerLoginDto"
              },
              "examples": {
                "standard": {
                  "value": {
                    "username": "user@example.com",
                    "password": "StrongP@ssw0rd"
                  },
                  "summary": "Standard login request"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Authentication successful, tokens provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RocketsServerJwtResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Invalid credentials or inactive account"
          }
        },
        "tags": [
          "auth"
        ]
      }
    },
    "/token/refresh": {
      "post": {
        "operationId": "AuthTokenRefreshController_refresh",
        "summary": "Refresh access token",
        "description": "Generates a new access token using a valid refresh token",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "Refresh token information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RocketsServerRefreshDto"
              },
              "examples": {
                "standard": {
                  "value": {
                    "refreshToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                  },
                  "summary": "Standard refresh token request"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "New access and refresh tokens",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RocketsServerJwtResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Invalid or expired refresh token"
          }
        },
        "tags": [
          "auth"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/recovery/login": {
      "post": {
        "operationId": "RocketsServerRecoveryController_recoverLogin",
        "summary": "Recover username",
        "description": "Sends an email with the username associated with the provided email address",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "Email address for username recovery",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RocketsServerRecoverLoginDto"
              },
              "examples": {
                "standard": {
                  "value": {
                    "email": "user@example.com"
                  },
                  "summary": "Standard username recovery request"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Recovery email sent successfully (returns regardless of whether email exists)"
          },
          "400": {
            "description": "Invalid email format"
          }
        },
        "tags": [
          "auth"
        ]
      }
    },
    "/recovery/password": {
      "post": {
        "operationId": "RocketsServerRecoveryController_recoverPassword",
        "summary": "Request password reset",
        "description": "Sends an email with a password reset link to the provided email address",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "Email address for password reset",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RocketsServerRecoverPasswordDto"
              },
              "examples": {
                "standard": {
                  "value": {
                    "email": "user@example.com"
                  },
                  "summary": "Standard password reset request"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Recovery email sent successfully (returns regardless of whether email exists)"
          },
          "400": {
            "description": "Invalid email format"
          }
        },
        "tags": [
          "auth"
        ]
      },
      "patch": {
        "operationId": "RocketsServerRecoveryController_updatePassword",
        "summary": "Reset password",
        "description": "Updates the user password using a valid recovery passcode",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "Passcode and new password information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RocketsServerUpdatePasswordDto"
              },
              "examples": {
                "standard": {
                  "value": {
                    "passcode": "abc123def456",
                    "newPassword": "NewSecureP@ssw0rd"
                  },
                  "summary": "Standard password reset"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password updated successfully"
          },
          "400": {
            "description": "Invalid passcode, password requirements not met, or passcode expired"
          }
        },
        "tags": [
          "auth"
        ]
      }
    },
    "/recovery/passcode/{passcode}": {
      "get": {
        "operationId": "RocketsServerRecoveryController_validatePasscode",
        "summary": "Validate recovery passcode",
        "description": "Checks if the provided passcode is valid and not expired",
        "parameters": [
          {
            "name": "passcode",
            "required": true,
            "in": "path",
            "description": "Recovery passcode to validate",
            "schema": {
              "example": "abc123def456",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Passcode is valid"
          },
          "404": {
            "description": "Passcode is invalid or expired"
          }
        },
        "tags": [
          "auth"
        ]
      }
    },
    "/otp": {
      "post": {
        "operationId": "RocketsServerOtpController_sendOtp",
        "summary": "Send OTP to the provided email",
        "description": "Generates a one-time passcode and sends it to the specified email address",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "Email to receive the OTP",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RocketsServerOtpSendDto"
              },
              "examples": {
                "standard": {
                  "value": {
                    "email": "user@example.com"
                  },
                  "summary": "Standard OTP request"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OTP sent successfully"
          },
          "400": {
            "description": "Invalid email format"
          }
        },
        "tags": [
          "otp"
        ]
      },
      "patch": {
        "operationId": "RocketsServerOtpController_confirmOtp",
        "summary": "Confirm OTP for a given email and passcode",
        "description": "Validates the OTP passcode for the specified email and returns authentication tokens on success",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "Email and passcode for OTP verification",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RocketsServerOtpConfirmDto"
              },
              "examples": {
                "standard": {
                  "value": {
                    "email": "user@example.com",
                    "passcode": "123456"
                  },
                  "summary": "Standard OTP confirmation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OTP confirmed successfully, authentication tokens provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RocketsServerJwtResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid email format or missing required fields"
          },
          "401": {
            "description": "Invalid OTP or expired passcode"
          }
        },
        "tags": [
          "otp"
        ]
      }
    },
    "/oauth/authorize": {
      "get": {
        "operationId": "AuthOAuthController_authorize",
        "parameters": [
          {
            "name": "scopes",
            "required": true,
            "in": "query",
            "description": "Space separated list of OAuth scopes to pass on to the provider. Common scopes: email, profile, openid",
            "schema": {
              "type": "string",
              "pattern": "[^ ]+( +[^ ]+)*"
            }
          },
          {
            "name": "provider",
            "required": true,
            "in": "query",
            "description": "Name of the OAuth provider. Supported providers: google, github, apple",
            "schema": {
              "type": "string",
              "enum": [
                "google",
                "github",
                "apple"
              ]
            }
          }
        ],
        "responses": {
          "302": {
            "description": "HTTP Redirect to the OAuth identity provider's authorization URL.",
            "headers": {
              "Location": {
                "description": "URL to which the user agent should redirect (or open in a browser for mobile apps).",
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              }
            }
          }
        },
        "tags": [
          "oauth"
        ]
      }
    },
    "/oauth/callback": {
      "get": {
        "operationId": "AuthOAuthController_callback",
        "parameters": [],
        "responses": {
          "200": {
            "description": "DTO containing an access token and a refresh token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationJwtResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "oauth"
        ]
      },
      "post": {
        "operationId": "AuthOAuthController_callbackPost",
        "parameters": [],
        "responses": {
          "200": {
            "description": "DTO containing an access token and a refresh token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationJwtResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "oauth"
        ]
      }
    },
    "/admin/users/{id}": {
      "patch": {
        "operationId": "admin_users_updateOne",
        "summary": "",
        "description": "Updates the currently authenticated user profile information",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "User profile information to update",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExtendedUserUpdateDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User profile updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExtendedUserDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid input data"
          },
          "401": {
            "description": "Unauthorized - User not authenticated"
          }
        },
        "tags": [
          "admin"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "get": {
        "operationId": "admin_users_getOne",
        "summary": "",
        "parameters": [
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": false
          },
          {
            "name": "",
            "required": false,
            "in": "query",
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          },
          {
            "name": "cache",
            "required": false,
            "in": "query",
            "description": "Reset cache (if was enabled). <a href=\"https://github.com/nestjsx/crud/wiki/Requests#cache\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "integer",
              "minimum": 0,
              "maximum": 1
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Read-One ExtendedUserDto",
            "schema": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExtendedUserDto"
                }
              }
            }
          }
        },
        "tags": [
          "admin"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/admin/users": {
      "get": {
        "operationId": "admin_users_getMany",
        "summary": "",
        "parameters": [
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": false
          },
          {
            "name": "s",
            "required": false,
            "in": "query",
            "description": "Adds search condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#search\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "description": "Adds filter condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#filter\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          },
          {
            "name": "or",
            "required": false,
            "in": "query",
            "description": "Adds OR condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#or\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "description": "Adds sort by field. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#sort\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          },
          {
            "name": "",
            "required": false,
            "in": "query",
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Limit amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#limit\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "Offset amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#offset\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page portion of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#page\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "cache",
            "required": false,
            "in": "query",
            "description": "Reset cache (if was enabled). <a href=\"https://github.com/nestjsx/crud/wiki/Requests#cache\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "integer",
              "minimum": 0,
              "maximum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Read-All ExtendedUserDto as array or paginated response.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedDto"
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ExtendedUserDto"
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "admin"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/signup": {
      "post": {
        "operationId": "signup_createOne",
        "summary": "Create a new user account",
        "description": "Registers a new user in the system with email, username and password",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExtendedUserCreateDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExtendedUserDto"
                }
              }
            }
          }
        },
        "tags": [
          "auth"
        ]
      }
    },
    "/user": {
      "get": {
        "operationId": "UserCrudController_getOne",
        "summary": "",
        "description": "Retrieves the currently authenticated user profile information",
        "parameters": [],
        "responses": {
          "200": {
            "description": "User profile retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExtendedUserDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - User not authenticated"
          }
        },
        "tags": [
          "user"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "patch": {
        "operationId": "UserCrudController_updateOne",
        "summary": "",
        "description": "Updates the currently authenticated user profile information",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "User profile information to update",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExtendedUserUpdateDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User profile updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExtendedUserDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid input data"
          },
          "401": {
            "description": "Unauthorized - User not authenticated"
          }
        },
        "tags": [
          "user"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    }
  },
  "info": {
    "title": "Rockets API",
    "description": "API documentation for Rockets Server",
    "version": "1.0",
    "contact": {}
  },
  "tags": [],
  "servers": [],
  "components": {
    "securitySchemes": {
      "bearer": {
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "type": "http"
      }
    },
    "schemas": {
      "RocketsServerLoginDto": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "description": "Username"
          },
          "password": {
            "type": "string",
            "description": "Password"
          }
        },
        "required": [
          "username",
          "password"
        ]
      },
      "RocketsServerJwtResponseDto": {
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string",
            "description": "JWT access token to use for request authorization."
          },
          "refreshToken": {
            "type": "string",
            "description": "JWT refresh token to use for obtaining a new access token."
          }
        },
        "required": [
          "accessToken",
          "refreshToken"
        ]
      },
      "RocketsServerRefreshDto": {
        "type": "object",
        "properties": {
          "refreshToken": {
            "type": "string",
            "description": "JWT access token to use for request authorization."
          }
        },
        "required": [
          "refreshToken"
        ]
      },
      "RocketsServerRecoverLoginDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "title": "user email",
            "description": "Recover email login by providing an email that will receive an username"
          }
        },
        "required": [
          "email"
        ]
      },
      "RocketsServerRecoverPasswordDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "title": "user email",
            "description": "Recover email password by providing an email that will receive a password reset link"
          }
        },
        "required": [
          "email"
        ]
      },
      "RocketsServerUpdatePasswordDto": {
        "type": "object",
        "properties": {
          "passcode": {
            "type": "string",
            "title": "account reset passcode",
            "description": "Passcode used to reset account password"
          },
          "newPassword": {
            "type": "string",
            "title": "account new password",
            "description": "New password account"
          }
        },
        "required": [
          "passcode",
          "newPassword"
        ]
      },
      "RocketsServerOtpSendDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "Email to send OTP to",
            "example": "user@example.com"
          }
        },
        "required": [
          "email"
        ]
      },
      "RocketsServerOtpConfirmDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "Email associated with the OTP",
            "example": "user@example.com"
          },
          "passcode": {
            "type": "string",
            "description": "OTP passcode to verify",
            "example": "123456"
          }
        },
        "required": [
          "email",
          "passcode"
        ]
      },
      "AuthenticationJwtResponseDto": {
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string",
            "description": "JWT access token to use for request authorization."
          },
          "refreshToken": {
            "type": "string",
            "description": "JWT refresh token to use for obtaining a new access token."
          }
        },
        "required": [
          "accessToken",
          "refreshToken"
        ]
      },
      "ExtendedUserUpdateDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier"
          },
          "email": {
            "type": "string",
            "description": "Email"
          },
          "username": {
            "type": "string",
            "description": "Username"
          },
          "active": {
            "type": "boolean",
            "description": "Active"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "email",
          "username",
          "active"
        ]
      },
      "ExtendedUserDto": {
        "type": "object",
        "properties": {
          "dateCreated": {
            "type": "string",
            "format": "date-time",
            "description": "Date created"
          },
          "dateUpdated": {
            "type": "string",
            "format": "date-time",
            "description": "Date updated"
          },
          "dateDeleted": {
            "type": "string",
            "format": "date-time",
            "description": "Date deleted",
            "nullable": true
          },
          "version": {
            "type": "number",
            "description": "Version of the data"
          },
          "id": {
            "type": "string",
            "description": "Unique identifier"
          },
          "email": {
            "type": "string",
            "description": "Email"
          },
          "username": {
            "type": "string",
            "description": "Username"
          },
          "active": {
            "type": "boolean",
            "description": "Active"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "test": {
            "type": "string"
          }
        },
        "required": [
          "dateCreated",
          "dateUpdated",
          "dateDeleted",
          "version",
          "id",
          "email",
          "username",
          "active",
          "test"
        ]
      },
      "PaginatedDto": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Array of Orgs",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExtendedUserDto"
            }
          },
          "count": {
            "type": "number",
            "description": "Count of all records"
          },
          "total": {
            "type": "number",
            "description": "Count of records on current page"
          },
          "page": {
            "type": "number",
            "description": "Current page number"
          },
          "pageCount": {
            "type": "number",
            "description": "Total number of pages"
          }
        },
        "required": [
          "data",
          "count",
          "total",
          "page",
          "pageCount"
        ]
      },
      "ExtendedUserCreateDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "Email"
          },
          "username": {
            "type": "string",
            "description": "Username"
          },
          "active": {
            "type": "boolean",
            "description": "Active"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "password": {
            "type": "string",
            "description": "Plain text password to set"
          }
        },
        "required": [
          "email",
          "username",
          "active",
          "password"
        ]
      }
    }
  }
}